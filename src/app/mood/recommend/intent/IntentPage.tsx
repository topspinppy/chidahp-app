"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";

// üí° Intent options with emoji
const userIntents = [
  { text: "‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏°‡∏µ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏Ç‡∏∂‡πâ‡∏ô", emoji: "üíô" },
  { text: "‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô", emoji: "üß†" },
  { text: "‡∏≠‡∏¢‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡∏∞‡πÄ‡∏ö‡∏≤ ‡πÜ", emoji: "üòÑ" },
  { text: "‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏Å", emoji: "ü´Ç" },
  { text: "‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏∏‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", emoji: "üå±" },
  { text: "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à", emoji: "‚ö°" },
  { text: "‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏±‡∏Å‡πÉ‡∏à‡πÄ‡∏â‡∏¢ ‡πÜ ‡∏™‡∏±‡∏Å‡∏ô‡∏¥‡∏î", emoji: "üõãÔ∏è" },
];

// üß† Quote ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ mood
const moodQuotes: Record<string, string> = {
  "‡πÄ‡∏®‡∏£‡πâ‡∏≤": "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏∑‡∏°... ‡πÅ‡∏Ñ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏à‡πá‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á",
  "‡∏´‡∏°‡∏î‡πÑ‡∏ü": "‡πÅ‡∏Ñ‡πà‡∏•‡∏∑‡∏°‡∏ï‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏Å‡πá‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß... ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏∏‡∏Å‡∏Å‡πá‡πÑ‡∏î‡πâ",
  "‡∏™‡∏±‡∏ö‡∏™‡∏ô": "‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏≠ ‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏´‡∏°‡πà",
  "‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á": "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏°‡∏≠‡∏á... ‡πÅ‡∏ï‡πà‡∏°‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à",
  "‡πÇ‡∏Å‡∏£‡∏ò‡πÇ‡∏•‡∏Å": "‡πÇ‡∏•‡∏Å‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏ü‡∏£‡πå... ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏π‡∏î ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≠‡∏Å‡πÑ‡∏ß‡πâ",
  "‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà": "‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå... ‡πÅ‡∏ï‡πà‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏Å‡πâ‡∏≤‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≤",
  "‡πÄ‡∏´‡∏á‡∏≤": "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤... ‡πÅ‡∏Ñ‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ü‡∏±‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Å‡πá‡∏û‡∏≠",
  "‡πÄ‡∏ü‡∏µ‡∏¢‡∏ã": "‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á... ‡∏°‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏¢‡∏±‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏™‡∏±‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
  "‡∏Å‡∏±‡∏á‡∏ß‡∏•": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î... ‡πÅ‡∏Ñ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏Å‡πá‡∏Å‡∏•‡πâ‡∏≤‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß",
  "‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡πâ‡∏≤‡∏ß‡∏Ç‡πâ‡∏≤‡∏°": "‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ß‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡πà‡∏≤...‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏û‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏°‡∏±‡∏ô‡πÑ‡∏õ",
  "‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå... ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤",
  "‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÑ‡∏´‡∏ô...‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏Ñ‡πà‡∏´‡∏•‡∏á‡∏•‡∏∑‡∏°‡πÅ‡∏™‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏õ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß",
  "‡∏Æ‡∏µ‡∏•‡πÉ‡∏à": "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏•‡∏π‡∏Å‡πÉ‡∏´‡∏ç‡πà‡∏Å‡πá‡πÄ‡∏Ñ‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ... ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°",
  "‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÅ‡∏ö‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á... ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏á‡πÑ‡∏î‡πâ ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÇ‡∏ï‡∏Ç‡∏∂‡πâ‡∏ô",
  "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢": "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πà‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£... ‡πÅ‡∏Ñ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏Å‡πá‡∏ä‡∏ô‡∏∞‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
};

export default function IntentPage() {
  const router = useRouter();
  const [topMoods, setTopMoods] = useState<string[]>([]);
  const [selectedMood, setSelectedMood] = useState<string | null>(null);
  const [intent, setIntent] = useState<string | null>(null);

  useEffect(() => {
    const storedMoods = sessionStorage.getItem("topMoods");
    if (storedMoods) {
      const parsed = JSON.parse(storedMoods);
      if (Array.isArray(parsed)) {
        setTopMoods(parsed);
        setSelectedMood(parsed[0]);
      }
    } else {
      router.push("/mood/pre-question");
    }
  }, [router]);

  const handleConfirm = () => {
    if (!selectedMood || !intent) return;
    sessionStorage.setItem("finalMood", selectedMood);
    sessionStorage.setItem("userIntent", intent);
    router.push("/mood/recommend/result");
  };

  return (
    <motion.div
      className="relative min-h-screen overflow-hidden flex items-center justify-center px-6 py-12 font-sans"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 1.2 }}
    >
      {/* üé® BG Spin Animation */}
      <div className="absolute inset-0 z-0">
        <div className="absolute w-[200%] h-[200%] bg-gradient-to-br from-indigo-100 via-sky-100 to-white animate-[spin_60s_linear_infinite] opacity-30 rounded-full" />
      </div>

      {/* üí¨ Main Content */}
      <motion.div
        className="relative z-10 max-w-3xl w-full text-center"
        initial={{ opacity: 0, y: 24 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
      >
        <div className="text-5xl mb-2">üß≠</div>
        <h1 className="text-3xl font-bold text-gray-800 mb-1">
          ‡∏ä‡∏µ‡πâ‡∏î‡∏≤‡∏ö‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏≤‡πÉ‡∏à‡∏Ñ‡∏∏‡∏ì‡∏î‡∏π...
        </h1>
        <p className="text-gray-600 mb-6 text-sm">
          ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
        </p>

        {/* üü£ Mood Buttons */}
        <motion.div
          className="flex flex-wrap justify-center gap-3 mb-8"
          initial="hidden"
          animate="visible"
          variants={{ visible: { transition: { staggerChildren: 0.07 } } }}
        >
          {topMoods.map((mood) => (
            <motion.button
              key={mood}
              onClick={() => setSelectedMood(mood)}
              variants={{
                hidden: { opacity: 0, y: 10 },
                visible: { opacity: 1, y: 0 },
              }}
              whileTap={{ scale: 0.95 }}
              whileHover={{ scale: 1.05 }}
              className={`px-4 py-2 rounded-full border text-sm font-medium transition-all shadow-sm ${
                selectedMood === mood
                  ? "bg-indigo-600 text-white border-indigo-600"
                  : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50"
              }`}
            >
              {mood}
            </motion.button>
          ))}
        </motion.div>

        {/* üß† Mood Quote */}
        <AnimatePresence>
          {selectedMood && (
            <motion.div
              key="quote"
              className="max-w-md mx-auto mb-4 text-indigo-700 text-sm italic"
              initial={{ opacity: 0, y: 8 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -8 }}
              transition={{ duration: 0.4 }}
            >
              ‚Äú{moodQuotes[selectedMood] || "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ö‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏°‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏•‡∏Å ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏≤"}‚Äù
            </motion.div>
          )}
        </AnimatePresence>

        {/* ‚ùì Prompt */}
        {selectedMood && (
          <p className="mb-6 text-gray-700 font-medium">
            ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ...‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠?
          </p>
        )}

        {/* üéØ Intent Choices */}
        <motion.div
          className="grid grid-cols-1 sm:grid-cols-2 gap-4 max-w-2xl mx-auto mb-8"
          initial="hidden"
          animate="visible"
          variants={{ visible: { transition: { staggerChildren: 0.05 } } }}
        >
          {userIntents.map(({ text, emoji }) => (
            <motion.div
              key={text}
              variants={{
                hidden: { opacity: 0, y: 10 },
                visible: { opacity: 1, y: 0 },
              }}
              whileHover={{ scale: 1.03 }}
              whileTap={{ scale: 0.97 }}
              onClick={() => setIntent(text)}
              className={`cursor-pointer p-4 rounded-xl border text-sm transition-all duration-300 text-center select-none ${
                intent === text
                  ? "bg-indigo-500 text-white border-indigo-500 ring-2 ring-indigo-300"
                  : "bg-white text-gray-700 border-gray-200 hover:bg-gray-50"
              }`}
            >
              <div className="text-2xl mb-1">{emoji}</div>
              {text}
            </motion.div>
          ))}
        </motion.div>

        {/* ‚úÖ Confirm Button */}
        <motion.button
          onClick={handleConfirm}
          disabled={!intent}
          whileHover={{ scale: intent ? 1.05 : 1 }}
          whileTap={{ scale: 0.95 }}
          className="bg-indigo-600 text-white px-6 py-3 rounded-full shadow-lg hover:bg-indigo-700 transition disabled:opacity-40 disabled:cursor-not-allowed"
        >
          ‡πÑ‡∏õ‡∏î‡∏π‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏¢ ‚Üí
        </motion.button>

        {/* üí° Gentle Note */}
        {intent && (
          <p className="text-xs text-gray-500 mt-4 italic">
            ‚ú® ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡∏ú‡∏¥‡∏î‡∏´‡∏£‡∏≠‡∏Å... ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡πâ‡∏≤‡∏ü‡∏±‡∏á‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Å‡πá‡∏ô‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°‡πÅ‡∏•‡πâ‡∏ß
          </p>
        )}
      </motion.div>
    </motion.div>
  );
}
